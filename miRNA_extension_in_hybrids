
import os,csv
def series_basepattern(f_viennad): ## Extract the series number and the corresponding base pattern
    with open(f_viennad,'r+') as f1:
        dict1 = {} ## find each base pattern in viennad file
        list1 = []
        for line1 in f1:
            line2 = line1.strip().split('_')
            if len(line2)>= 15:
                miRNA_name1 = line2[4]
                target_name1 = line2[-4]
                seriers_number = line2[0] + '_' + line2[1]
                list1.append(line1.strip())
            else:
                list1.append(line1.strip())
                if len(list1) == 6:
                    try:
                        miRNA_end = int(list1[2].split('\t')[3])
                        miRNA_basepattern = list1[4].split('\t')[0][:miRNA_end]
                        mRNA_basepattern = list1[4].split('\t')[0][miRNA_end:].strip('.')
                        combine_name1 = '{}${}${}${}'.format(miRNA_name1.lower(),target_name1.upper(),miRNA_basepattern,mRNA_basepattern.strip('.'))
                        dict1[seriers_number] = combine_name1
                    except:
                        print (list1)
                        list1=[]
                    list1 = []
    return dict1
def microRNA_database(): ## For analyzing the length of each miRNA
    with open('$hOH7.fasta','r+') as f1:
        dict1, name1, seq1 = {},'',''
        for line1 in f1:
            if line1[0] == '>':
                if ('microRNA' in name1):
                    dict1[name1.split('_')[2]] = len(seq1)
                name1 = line1.strip()[1:]
                seq1 = ''
            else:
                seq1 += line1.strip()
        if ('microRNA' in name1):
            dict1[name1.split('_')[2]] = len(seq1)
            seq1 = ''
    return dict1
miRNA_dict1 = microRNA_database()


import os,csv
dict_all_hyb= {} ## get complete and short miRNA of each base pattern 
dict_eachmiRNA_ex = {} ## miRNA total number and total extension
list_all=['$ua.viannad file1', '$ua.viannad file2', '$..', ]## ua.viennad file names
for i in list_all:
    print (i)
    dict_series_base = series_basepattern(i+'_ua.viennad')  ##input each ua_viannad file
    with open(i+'_ua.hyb','r+') as f1:##input each ua_hyb file
        reader = csv.reader(f1,delimiter='\t')
        for line1 in reader:
            if ('microRNA' in line1[3]): ## miRNA on the left
                pos_microRNA_end = int(line1[5])
                pos_mRNA_start = int(line1[10])
                seq_insert = line1[1][pos_microRNA_end:pos_mRNA_start-1] ### insert between microRNA and target
                if len(seq_insert)<=8:
                    if line1[0] in dict_series_base:
                        base_pattern_name1 = dict_series_base[line1[0]] ## base pattern correspond to Series repeat number
                        dict_all_hyb[base_pattern_name1] = dict_all_hyb.get(base_pattern_name1,{})
                        dict_all_hyb[base_pattern_name1][seq_insert] = dict_all_hyb[base_pattern_name1].get(seq_insert,0)
                        dict_all_hyb[base_pattern_name1][seq_insert] += int(line1[0].split('_')[-1])
                        each_miRNA = base_pattern_name1.split('$')[0]
                        dict_eachmiRNA_ex[each_miRNA] = dict_eachmiRNA_ex.get(each_miRNA,{})  ## each miRNA extension
                        dict_eachmiRNA_ex[each_miRNA][seq_insert] = dict_eachmiRNA_ex[each_miRNA].get(seq_insert,0)
                        dict_eachmiRNA_ex[each_miRNA][seq_insert] += int(line1[0].split('_')[-1])
                    elif line1[0] not in dict_series_base:
                        print (str(line1[0]+' doesn\'t exist'))
            elif ('microRNA' in line1[9]): ## microRNA on the right
                seq_insert = line1[1][int(line1[11]):] ### insert at the end of mRNA
                if len(seq_insert)<=8:
                    if line1[0] in dict_series_base:
                        base_pattern_name1 = dict_series_base[line1[0]] ## base pattern correspond to Series repeat number
                        dict_all_hyb[base_pattern_name1] = dict_all_hyb.get(base_pattern_name1,{})
                        dict_all_hyb[base_pattern_name1][seq_insert] = dict_all_hyb[base_pattern_name1].get(seq_insert,0)
                        dict_all_hyb[base_pattern_name1][seq_insert] += int(line1[0].split('_')[-1])
                        each_miRNA = base_pattern_name1.split('$')[0]
                        dict_eachmiRNA_ex[each_miRNA] = dict_eachmiRNA_ex.get(each_miRNA,{})  ## each miRNA extension
                        dict_eachmiRNA_ex[each_miRNA][seq_insert] = dict_eachmiRNA_ex[each_miRNA].get(seq_insert,0)
                        dict_eachmiRNA_ex[each_miRNA][seq_insert] += int(line1[0].split('_')[-1])
                    elif line1[0] not in dict_series_base:
                        print (str(line1[0]+' doesn\'t exist'))
                        
t_num, ex2_num,ex2AU_num = 0,0,0
f1 = open('$output_TDMD_extension.txt','w+')
f1.write('each_hyb\tex2\tex2AU\n')
for pattern,exs_dict1 in dict_all_hyb.items():## check extension of miRNA in only one type hyb
    for ex_kind in exs_dict1: ## any kind of extension
        t_num += exs_dict1[ex_kind]
        if len(ex_kind)>=2:
            ex2_num += exs_dict1[ex_kind] ## all extension >=2nt
        if len(ex_kind)>=2 and (('A' in ex_kind) or ('T' in ex_kind)):
            ex2AU_num += exs_dict1[ex_kind]## all A/U extension >= 2nt
    f1.write('{}\t{}\t{}\t{}\n'.format(pattern,t_num, ex2_num, ex2AU_num))
    t_num, ex2_num,ex2AU_num = 0,0,0
f1.close()


t_num, ex2_num,ex2AU_num = 0,0,0
f1 = open('$output_miRNAall_extension.txt','w+')
f1.write('each_miRNA\ttotal_number\tex2\tex2AU\n')
for miRNA_name,exs_dict1 in dict_eachmiRNA_ex.items():## check extension of miRNA in only one type hyb
    for ex_kind in exs_dict1: ## any kind of extension
        t_num += exs_dict1[ex_kind]
        if len(ex_kind)>=2:
            ex2_num += exs_dict1[ex_kind] ## all extension >=2nt
        if len(ex_kind)>=2 and (('A' in ex_kind) or ('T' in ex_kind)):
            ex2AU_num += exs_dict1[ex_kind]## all A/U extension >= 2nt
    f1.write('{}\t{}\t{}\t{}\n'.format(miRNA_name,t_num, ex2_num, ex2AU_num))
    t_num, ex2_num,ex2AU_num = 0,0,0
f1.close()
